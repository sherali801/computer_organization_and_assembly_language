.MODEL SMALL
.STACK 100H
.CODE
MAIN PROC
  MOV AX, 037FH ;STARTING SEGMENT ADDRESS
  MOV DS, AX
  MOV SI, 0100H ;STARTING OFFSET ADDRESS
  MOV CX, 8
  OUTTER_LOOP: ;DISPLAY 8 LINES
  PUSH CX ;SAVING COUNTER
  MOV BX, AX ;PARAMETER FOR PRINT_HEX FUNCTION (WHAT TO PRINT)
  PUSH AX ;SAVING SEGMENT ADDRESS
  MOV CH, 4 ;PARAMETER FOR PRINT_HEX FUNCTION (HOW MANY CHARACTERS TO PRINT)
  CALL PRINT_HEX
  MOV DL, ':' ;DISPLAY COOLON BETWEEN SEGMENT AND OFFSET
  MOV AH, 02H
  INT 21H
  MOV BX, SI ;PARAMETER FOR PRINT_HEX FUNCTION (STARTING ADDRESS OF WHAT TO PRINT)
  MOV CH, 4 ;PARAMETER FOR PRINT_HEX FUNCTION (HOW MANY CHARACTERS TO PRINT)
  CALL PRINT_HEX
  MOV DL, ' ' ;DISPLAY TWO SPACES AFTER PRINTING SEGMENT:OFFSET
  MOV AH, 02H
  INT 21H
  INT 21H
  MOV DI, SI ;PARAMETER FOR PRINT_HEX_EIGHT_BYTES FUNCTION (STARTING ADDRESS OF WHAT TO PRINT)
  CALL PRINT_HEX_EIGHT_BYTES
  MOV DL, '-' ;DISPLAY HYPEN (-) BETWEEN 8 BYTES
  MOV AH, 02H
  INT 21H
  CALL PRINT_HEX_EIGHT_BYTES 
  MOV DL, ' ' ;DISPLAY THREE SPACES AFTER HEX FORMAT PRINTING
  MOV AH, 02H
  INT 21H
  INT 21H
  INT 21H
  MOV DI, SI ;PARAMETER FOR PRINT_ASCII FUNCTION (STARTING ADDRESS OF WHAT TO PRINT)
  CALL PRINT_ASCII
  MOV DL, 10 ;DISPLAY CARRIGE RETURN
  MOV AH, 02H
  INT 21H
  MOV DL, 13 ;DISPLAY NEWLINE
  MOV AH, 02H
  INT 21H
  MOV SI, DI ;DI IS ALREADY POINTING TO STARTING ADDRESS OF NEXT 16 BYTES 
  POP AX ;RESTORING SEGMENT ADDRESS
  POP CX ;RESTORING COUNTER
  LOOP OUTTER_LOOP
  MOV AH, 4CH ;EXIT DOS
  INT 21H
MAIN ENDP

;
;PARAMETERS ARE BX(HOLD WHICH IS TO BE PRINTED), CH(HOW MANY TO PRINT)
;
PRINT_HEX PROC
  ;
  ;SAVING CONTENT OF ALL REGISTERS
  ;
  PUSH AX
  PUSH BX
  PUSH CX
  PUSH DX
  PUSH SI
  PUSH DI
  PUSH BP
  MOV CL, 4
  PRINT_HEX_OUTPUT:
    MOV DL, BH ;ALWAYS DISPLAY UPPER BYTE
    SHR DL, CL ;ALWAYS DISPLAY LOWER NIBBLE OF UPPER BYTER
    CMP DL, 9 
    JLE PRINT_HEX_DIGIT ;JUMP IF IT'S A DIGIT 
    ADD DL, 37H ;CONVERTING TO CHARCATER 
    JMP PRINT_HEX_DISPLAY
    PRINT_HEX_DIGIT:
      ADD DL, 30H ;CONVERTING TO DIGIT 
    PRINT_HEX_DISPLAY:
      MOV AH, 02H ;DISPLAY CHARACTER 
      INT 21H
  ROL BX, CL ;MOVING LOWER NIBBLE TO UPPER NIBBLE
  DEC CH ;DECREMENTING COUNTER
  JNZ PRINT_HEX_OUTPUT ;JUMP IF COUNTER IT NOT ZERO
  ;
  ;RESTORING CONTENT OF ALL REGISTERS
  ;
  POP BP
  POP DI
  POP SI
  POP DX
  POP CX
  POP BX
  POP AX
  RET
PRINT_HEX ENDP

;
;PARAMETERS ARE DI(HOLD STARTING OFFSET ADDRESS OF 8 BYTES TO BE PRINTED)
;
PRINT_HEX_EIGHT_BYTES PROC
  ;
  ;SAVING CONTENT OF ALL REGISTERS
  ;
  PUSH AX
  PUSH BX
  PUSH CX
  PUSH DX
  PUSH SI
  PUSH BP
  MOV CX, 8
  PRINT_HEX_EIGHT_BYTES_OUTPUT:
    PUSH CX ;STORING COUNTER AS CH IS USED FOR PRINT_HEX FUNCTION
    MOV BH, [DI] ;PARAMETER FOR PRINT_HEX FUNCTION (STARTING ADDRESS OF WHAT TO PRINT)
    MOV CH, 2 ;PARAMETER FOR PRINT_HEX FUNCTION (HOW MANY CHARACTERS TO PRINT)
    CALL PRINT_HEX
    POP CX ;RESTORING COUNTER
    CMP CX, 1 ;NO SPACE AFTER PRINTING 8TH BYTE 
    JE PRINT_HEX_EIGHT_BYTES_NO_SPACE ;JUMP IF COUNTER IS 1 OR GREATER
    MOV DL, ' ' ;DISPLAY SPACE
    MOV AH, 02H
    INT 21H
    PRINT_HEX_EIGHT_BYTES_NO_SPACE:
    INC DI ;INCREMENTING TO PRINT NEXT BYTE 
    LOOP PRINT_HEX_EIGHT_BYTES_OUTPUT
  ;
  ;RESTORING CONTENT OF ALL REGISTERS
  ;
  POP BP
  POP SI
  POP DX
  POP CX
  POP BX
  POP AX
  RET
PRINT_HEX_EIGHT_BYTES ENDP

;
;PARAMETERS ARE DI(HOLD STARTING OFFSET ADDRESS OF 16 BYTES TO BE PRINTED)
;
PRINT_ASCII PROC
  ;
  ;SAVING CONTENT OF ALL REGISTERS
  ;
  PUSH AX
  PUSH BX
  PUSH CX
  PUSH DX
  PUSH SI
  PUSH BP
  MOV CX, 16
  PRINT_ASCII_OUTPUT:
    MOV BL, [DI] ;MOVING CONTENT OF DI TO PRINT 
    CMP BL, 20H
    JL PRINT_ASCII_DOT ;JUMP IF LESS THEN 20H
    CMP BL, 7EH
    JG PRINT_ASCII_DOT ;JUMP IF GREATER THEN 73H
    MOV DL, BL ;DISPLAY CHARACTER 
    MOV AH, 02H
    INT 21H
    JMP PRINT_ASCII_REMAIN
    PRINT_ASCII_DOT:
      MOV DL, '.' ;DISPLAY (.)
      MOV AH, 02H
      INT 21H
    PRINT_ASCII_REMAIN:
    INC DI ;INCREMENTINFG DI SO IT CAN POINT TO NEXT BYTE TO PRINT 
    LOOP PRINT_ASCII_OUTPUT
  ;
  ;RESTORING CONTENT OF ALL REGISTERS
  ;
  POP BP
  POP SI
  POP DX
  POP CX
  POP BX
  POP AX
  RET
PRINT_ASCII ENDP

END MAIN
